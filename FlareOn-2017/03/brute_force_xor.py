def sh(n):
	return hex(n).replace("0x", "")

def itn(n):
	return int(n, 16)

def flagdecipher(array):
	total 	 = 0x79 #array total lenght
	vi 		 = 0x0  #array index

	var_ff   = 0xFF #totalsum
	ecx  	 = 0xFF
	edi		 = 0x0

	for a in range(total):
		total -= 0x14
		edi    = var_ff

		for i in range(0x14):
			try:
				var_ff += array[vi]
				edi     = var_ff
				ecx    += var_ff
				vi     += 0x1
			except:
				break

		edi    = edi >> 8  			         #shr
		var_ff = itn(sh((var_ff+edi))[-2:])  #movzx

		ab     = "".join("%04X"%ecx)         #patterning 4 bytes hex for [-2:] and [:-2] below
		ecx    = itn(ab[-2:]) + itn(ab[:-2]) #wrapping the shifts from ASM

		if total<0x0:
			break
	
	return sh(ecx) + sh(var_ff)



file_array = [ 0x33, 0xE1, 0xC4, 0x99, 0x11, 0x06, 0x81, 0x16, 0xF0, 0x32, 0x9F, 0xC4, 0x91, 0x17, 
			   0x06, 0x81, 0x14, 0xF0, 0x06, 0x81, 0x15, 0xF1, 0xC4, 0x91, 0x1A, 0x06, 0x81, 0x1B, 0xE2, 
			   0x06, 0x81, 0x18, 0xF2, 0x06, 0x81, 0x19, 0xF1, 0x06, 0x81, 0x1E, 0xF0, 0xC4, 0x99, 0x1F, 
			   0xC4, 0x91, 0x1C, 0x06, 0x81, 0x1D, 0xE6, 0x06, 0x81, 0x62, 0xEF, 0x06, 0x81, 0x63, 0xF2, 
			   0x06, 0x81, 0x60, 0xE3, 0xC4, 0x99, 0x61, 0x06, 0x81, 0x66, 0xBC, 0x06, 0x81, 0x67, 0xE6, 
			   0x06, 0x81, 0x64, 0xE8, 0x06, 0x81, 0x65, 0x9D, 0x06, 0x81, 0x6A, 0xF2, 0xC4, 0x99, 0x6B, 
			   0x06, 0x81, 0x68, 0xA9, 0x06, 0x81, 0x69, 0xEF, 0x06, 0x81, 0x6E, 0xEE, 0x06, 0x81, 0x6F, 
			   0xAE, 0x06, 0x81, 0x6C, 0xE3, 0x06, 0x81, 0x6D, 0xEF, 0x06, 0x81, 0x72, 0xE9, 0x06, 0x81, 
			   0x73, 0x7C ]

z = 0xFF #255
for k in reversed(range(z)):
	new_array = []
	for i in range(len(file_array)):
		new_array.append(itn(sh((k ^ file_array[i])+0x22)[-2:])) #XORing brute forcing key

	if flagdecipher(new_array)=="fb5e": #checksum compare
		print("key:: " + hex(k)) 		#key found
		break

print("File array is decrypted. (debugger)")